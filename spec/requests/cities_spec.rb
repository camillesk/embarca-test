# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/cities', type: :request do
  # City. As you add validations to City, be sure to
  # adjust the attributes here as well.
  let(:state) { create :state }
  let(:valid_attributes) do
    { name: Faker::Address.city, population: rand, state_id: state.id }
  end

  let(:invalid_attributes) do
    { name: '', population: rand, state_id: 123 }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      City.create! valid_attributes
      get cities_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      city = City.create! valid_attributes
      get city_url(city)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_city_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      city = City.create! valid_attributes
      get edit_city_url(city)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new City' do
        expect do
          post cities_url, params: { city: valid_attributes }
        end.to change(City, :count).by(1)
      end

      it 'redirects to the created city' do
        post cities_url, params: { city: valid_attributes }
        expect(response).to redirect_to(city_url(City.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new City' do
        expect do
          post cities_url, params: { city: invalid_attributes }
        end.to change(City, :count).by(0)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:state) { create :state }
      let(:new_attributes) do
        { name: 'Curitiba', population: rand, state_id: state.id }
      end

      it 'updates the requested city' do
        city = City.create! valid_attributes
        patch city_url(city), params: { city: new_attributes }
        city.reload
        expect(city.name).to eq('Curitiba')
      end

      it 'redirects to the city' do
        city = City.create! valid_attributes
        patch city_url(city), params: { city: new_attributes }
        city.reload
        expect(response).to redirect_to(city_url(city))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested city' do
      city = City.create! valid_attributes
      expect do
        delete city_url(city)
      end.to change(City, :count).by(-1)
    end

    it 'redirects to the cities list' do
      city = City.create! valid_attributes
      delete city_url(city)
      expect(response).to redirect_to(cities_url)
    end
  end

  describe 'GET /search_cities' do
    it 'renders a successful response' do
      get search_cities_url
      expect(response).to be_successful
    end
  end

  describe 'POST /search_cities' do
    let!(:state2) { create(:state, name: 'Rio Grande do Sul') }
    let!(:city) { create(:city, name: 'Gramado', state: state2) }

    context 'when sending a valid city name' do
      it 'renders a successful response' do
        post search_cities_url, params: { search_cities: { name: 'gramado', state_name: '' } }
        expect(response).to be_successful
      end

      it 'renders city name' do
        post search_cities_url, params: { search_cities: { name: 'gramado', state_name: '' } }
        expect(response.body).to match(/Gramado/)
      end
    end

    context 'when sending a invalid city name' do
      it 'renders a successful response' do
        post search_cities_url, params: { search_cities: { name: 'floripa', state_name: '' } }
        expect(response).to be_successful
      end

      it 'renders no records found' do
        post search_cities_url, params: { search_cities: { name: 'floripa', state_name: '' } }
        expect(response.body).to match(/No records found./)
      end
    end

    context 'when sending a valid state name' do
      it 'renders a successful response' do
        post search_cities_url, params: { search_cities: { name: '', state_name: 'rio grande do sul' } }
        expect(response).to be_successful
      end

      it 'renders city name' do
        post search_cities_url, params: { search_cities: { name: '', state_name: 'rio grande do sul' } }
        expect(response.body).to match(/Gramado/)
      end
    end

    context 'when sending a invalid state name' do
      it 'renders a successful response' do
        post search_cities_url, params: { search_cities: { name: '', state_name: 'santa' } }
        expect(response).to be_successful
      end

      it 'renders no records found' do
        post search_cities_url, params: { search_cities: { name: '', state_name: 'santa' } }
        expect(response.body).to match(/No records found./)
      end
    end

    context 'when sending a valid city and state name that matches' do
      it 'renders a successful response' do
        post search_cities_url, params: { search_cities: { name: 'gramado', state_name: 'rio grande' } }
        expect(response).to be_successful
      end

      it 'renders city name' do
        post search_cities_url, params: { search_cities: { name: 'gramado', state_name: 'rio grande' } }
        expect(response.body).to match(/Gramado/)
      end
    end

    context 'when sending a valid city and state name that does not matches' do
      it 'renders a successful response' do
        post search_cities_url, params: { search_cities: { name: 'gramado', state_name: 'parana' } }
        expect(response).to be_successful
      end

      it 'renders no records found' do
        post search_cities_url, params: { search_cities: { name: 'gramado', state_name: 'parana' } }
        expect(response.body).to match(/No records found./)
      end
    end
  end
end
